{"ast":null,"code":"import _classCallCheck from\"/Users/Stasya/Desktop/dev/react-mesto-api-full/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/Stasya/Desktop/dev/react-mesto-api-full/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";var Auth=/*#__PURE__*/function(){function Auth(_ref){var baseUrl=_ref.baseUrl;_classCallCheck(this,Auth);this._checkResponse=function(res){if(res.ok){// Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\nreturn res.json();}// Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен для асинхронных операций\nreturn Promise.reject(res);};this._baseUrl=baseUrl;}// Возврат ответа об ошибке от сервера\n_createClass(Auth,[{key:\"register\",value:/**\n     * Метод запроса для регистрации пользователя на сервере\n     * @param {String} email Почтовый адрес пользователя, необходимый для регистрации\n     * @param {String} password Пароль пользователя, необходимый для регистрации\n     */function register(email,password){return fetch(\"\".concat(this._baseUrl,\"/signup\"),{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(this._checkResponse);}/**\n     * Метод запроса для авторизации пользователя на сервере\n     * @param {String} email Почтовый адрес пользователя, необходимый для авторизации\n     * @param {String} password Пароль пользователя, необходимый для авторизации\n     */},{key:\"login\",value:function login(email,password){return fetch(\"\".concat(this._baseUrl,\"/signin\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(this._checkResponse);}/**\n     * Метод запроса для проверки валидности токена и получения email для вставки в шапку сайта\n     * @param {String} token Токен пользователя, необходимый для авторизации/регистрации\n     */},{key:\"checkToken\",value:function checkToken(token){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{//эдпойнт\nmethod:\"GET\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(token)}}).then(this._checkResponse);}}]);return Auth;}();var auth=new Auth({baseUrl:\"https://auth.nomoreparties.co\"});export default auth;","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/react-mesto-api-full/frontend/src/utils/Auth.js"],"names":["Auth","baseUrl","_checkResponse","res","ok","json","Promise","reject","_baseUrl","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","token","Authorization","auth"],"mappings":"2RAAMA,CAAAA,I,yBACF,mBAAyB,IAAXC,CAAAA,OAAW,MAAXA,OAAW,iCAKzBC,cALyB,CAKR,SAACC,GAAD,CAAS,CACtB,GAAIA,GAAG,CAACC,EAAR,CAAY,CACR;AACA,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACD;AACA,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAeJ,GAAf,CAAP,CACH,CAZwB,CACrB,KAAKK,QAAL,CAAgBP,OAAhB,CACH,CAED;yCAUA;AACJ;AACA;AACA;AACA,OACI,kBAASQ,KAAT,CAAgBC,QAAhB,CAA0B,CACtB,MAAOC,CAAAA,KAAK,WAAI,KAAKH,QAAT,YAA4B,CACpCI,MAAM,CAAE,MAD4B,CAEpCC,OAAO,CAAE,CACLC,MAAM,CAAE,kBADH,CAEL,eAAgB,kBAFX,CAF2B,CAMpCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBR,KAAK,CAAEA,KADU,CAEjBC,QAAQ,CAAEA,QAFO,CAAf,CAN8B,CAA5B,CAAL,CAUJQ,IAVI,CAUC,KAAKhB,cAVN,CAAP,CAWH,CAED;AACJ;AACA;AACA;AACA,O,qBACI,eAAMO,KAAN,CAAaC,QAAb,CAAuB,CACnB,MAAOC,CAAAA,KAAK,WAAI,KAAKH,QAAT,YAA4B,CACpCI,MAAM,CAAE,MAD4B,CAEpCC,OAAO,CAAE,CACL,eAAgB,kBADX,CAF2B,CAKpCE,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBR,KAAK,CAAEA,KADU,CAEjBC,QAAQ,CAAEA,QAFO,CAAf,CAL8B,CAA5B,CAAL,CASJQ,IATI,CASC,KAAKhB,cATN,CAAP,CAUH,CAED;AACJ;AACA;AACA,O,0BACI,oBAAWiB,KAAX,CAAkB,CACd,MAAOR,CAAAA,KAAK,WAAI,KAAKH,QAAT,cAA8B,CACtC;AACAI,MAAM,CAAE,KAF8B,CAGtCC,OAAO,CAAE,CACLC,MAAM,CAAE,kBADH,CAEL,eAAgB,kBAFX,CAGLM,aAAa,kBAAYD,KAAZ,CAHR,CAH6B,CAA9B,CAAL,CAQJD,IARI,CAQC,KAAKhB,cARN,CAAP,CASH,C,oBAGL,GAAMmB,CAAAA,IAAI,CAAG,GAAIrB,CAAAA,IAAJ,CAAS,CAClBC,OAAO,CAAE,+BADS,CAAT,CAAb,CAIA,cAAeoB,CAAAA,IAAf","sourcesContent":["class Auth {\n    constructor({ baseUrl }) {\n        this._baseUrl = baseUrl;\n    }\n\n    // Возврат ответа об ошибке от сервера\n    _checkResponse = (res) => {\n        if (res.ok) {\n            // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n            return res.json();\n        }\n        // Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен для асинхронных операций\n        return Promise.reject(res);\n    };\n\n    /**\n     * Метод запроса для регистрации пользователя на сервере\n     * @param {String} email Почтовый адрес пользователя, необходимый для регистрации\n     * @param {String} password Пароль пользователя, необходимый для регистрации\n     */\n    register(email, password) {\n        return fetch(`${this._baseUrl}/signup`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email: email,\n                password: password,\n            }),\n        }).then(this._checkResponse);\n    }\n\n    /**\n     * Метод запроса для авторизации пользователя на сервере\n     * @param {String} email Почтовый адрес пользователя, необходимый для авторизации\n     * @param {String} password Пароль пользователя, необходимый для авторизации\n     */\n    login(email, password) {\n        return fetch(`${this._baseUrl}/signin`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                email: email,\n                password: password,\n            }),\n        }).then(this._checkResponse);\n    }\n\n    /**\n     * Метод запроса для проверки валидности токена и получения email для вставки в шапку сайта\n     * @param {String} token Токен пользователя, необходимый для авторизации/регистрации\n     */\n    checkToken(token) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            //эдпойнт\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        }).then(this._checkResponse);\n    }\n}\n\nconst auth = new Auth({\n    baseUrl: \"https://auth.nomoreparties.co\",\n});\n\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}