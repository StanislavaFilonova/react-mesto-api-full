{"ast":null,"code":"import _classCallCheck from\"/Users/Stasya/Desktop/dev/react-mesto-api-full/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/Stasya/Desktop/dev/react-mesto-api-full/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";var Api=/*#__PURE__*/function(){function Api(_ref){var baseUrl=_ref.baseUrl,headers=_ref.headers;_classCallCheck(this,Api);this._baseUrl=baseUrl;this._headers=headers;}// Возврат ответа об ошибке от сервера\n_createClass(Api,[{key:\"_checkResponse\",value:function _checkResponse(res){if(res.ok){// Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\nreturn res.json();}// Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\nreturn Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.statusText,\", \\u0441 \\u043A\\u043E\\u0434\\u043E\\u043C: \").concat(res.status));}/**\n     * Метод получения информации о пользователе с сервера\n     */},{key:\"getUserInfo\",value:function getUserInfo(){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{headers:this._headers}).then(this._checkResponse);}/**\n     * Метод получения карточек с сервера\n     */},{key:\"getCards\",value:function getCards(){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{headers:this._headers}).then(this._checkResponse);}/**\n     * Метод редактирования профиля пользователя\n     * @param {Object} userData Данные о пользователе\n     * userData.name {String}\n     * userData.about {String}\n     */},{key:\"editProfile\",value:function editProfile(userData){if(!userData.name){console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");return;}if(!userData.about){console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");return;}var url=\"\".concat(this._baseUrl,\"/users/me\");var hdr=this._headers;hdr[\"Content-Type\"]=\"application/json\";var opts={method:\"PATCH\",headers:hdr,body:JSON.stringify(userData)};return fetch(url,opts).then(this._checkResponse);}/**\n     * Метод загрузки новой карточки на сервер\n     * @param {Object} cardData Данные о карточке\n     * cardData.name {String}\n     * cardData.link {String}\n     */},{key:\"addCard\",value:function addCard(cardData){if(!cardData.name){console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");return;}if(!cardData.link){console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");return;}var url=\"\".concat(this._baseUrl,\"/cards\");var hdr=this._headers;hdr[\"Content-Type\"]=\"application/json\";var opts={method:\"POST\",headers:hdr,body:JSON.stringify(cardData)};return fetch(url,opts).then(this._checkResponse);}/**\n     * Метод удаления карточки\n     * @param {String} cardId Индентификатор карточки\n     */},{key:\"deleteCard\",value:function deleteCard(cardId){if(!cardId){console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");return;}var url=\"\".concat(this._baseUrl,\"/cards/\").concat(cardId);var hdr=this._headers;hdr[\"Content-Type\"]=\"application/json\";var opts={method:\"DELETE\",headers:hdr};return fetch(url,opts).then(this._checkResponse);}/**\n     * Метод постановки/удаления лайка на карточку\n     * @param {String} cardId Идентификатор карточки\n     */},{key:\"changeLike\",value:function changeLike(cardId,like){if(!cardId){console.error(\"Api.changeLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");return;}var url=\"\".concat(this._baseUrl,\"/cards/likes/\").concat(cardId);var opts={method:like?\"PUT\":\"DELETE\",headers:this._headers};return fetch(url,opts).then(this._checkResponse);}/**\n     * Метод обновления аватара\n     */},{key:\"renewAvatar\",value:function renewAvatar(avatarLink){if(!avatarLink){console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");return;}var url=\"\".concat(this._baseUrl,\"/users/me/avatar\");var hdr=this._headers;hdr[\"Content-Type\"]=\"application/json\";var opts={method:\"PATCH\",headers:hdr,body:JSON.stringify({avatar:avatarLink})};return fetch(url,opts).then(this._checkResponse);}}]);return Api;}();var api=new Api({baseUrl:\"https://mesto.nomoreparties.co/v1/cohort-30\",headers:{authorization:\"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\"Content-Type\":\"application/json\"}});export default api;","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["Api","baseUrl","headers","_baseUrl","_headers","res","ok","json","Promise","reject","statusText","status","fetch","then","_checkResponse","userData","name","console","error","about","url","hdr","opts","method","body","JSON","stringify","cardData","link","cardId","like","avatarLink","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor({ baseUrl, headers }) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n    // Возврат ответа об ошибке от сервера\n    _checkResponse(res) {\n        if (res.ok) {\n            // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n            return res.json();\n        }\n        // Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n        return Promise.reject(\n            `Ошибка: ${res.statusText}, с кодом: ${res.status}`\n        );\n    }\n\n    /**\n     * Метод получения информации о пользователе с сервера\n     */\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers,\n        }).then(this._checkResponse);\n    }\n\n    /**\n     * Метод получения карточек с сервера\n     */\n    getCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers,\n        }).then(this._checkResponse);\n    }\n\n    /**\n     * Метод редактирования профиля пользователя\n     * @param {Object} userData Данные о пользователе\n     * userData.name {String}\n     * userData.about {String}\n     */\n    editProfile(userData) {\n        if (!userData.name) {\n            console.error(\n                \"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n        if (!userData.about) {\n            console.error(\n                \"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n        const url = `${this._baseUrl}/users/me`;\n        const hdr = this._headers;\n        hdr[\"Content-Type\"] = \"application/json\";\n\n        const opts = {\n            method: \"PATCH\",\n            headers: hdr,\n            body: JSON.stringify(userData),\n        };\n\n        return fetch(url, opts).then(this._checkResponse);\n    }\n\n    /**\n     * Метод загрузки новой карточки на сервер\n     * @param {Object} cardData Данные о карточке\n     * cardData.name {String}\n     * cardData.link {String}\n     */\n    addCard(cardData) {\n        if (!cardData.name) {\n            console.error(\n                \"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n        if (!cardData.link) {\n            console.error(\n                \"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n\n        const url = `${this._baseUrl}/cards`;\n        const hdr = this._headers;\n        hdr[\"Content-Type\"] = \"application/json\";\n\n        const opts = {\n            method: \"POST\",\n            headers: hdr,\n            body: JSON.stringify(cardData),\n        };\n\n        return fetch(url, opts).then(this._checkResponse);\n    }\n\n    /**\n     * Метод удаления карточки\n     * @param {String} cardId Индентификатор карточки\n     */\n    deleteCard(cardId) {\n        if (!cardId) {\n            console.error(\n                \"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n        const url = `${this._baseUrl}/cards/${cardId}`;\n        const hdr = this._headers;\n        hdr[\"Content-Type\"] = \"application/json\";\n        const opts = {\n            method: \"DELETE\",\n            headers: hdr,\n        };\n\n        return fetch(url, opts).then(this._checkResponse);\n    }\n\n    /**\n     * Метод постановки/удаления лайка на карточку\n     * @param {String} cardId Идентификатор карточки\n     */\n    changeLike(cardId, like) {\n        if (!cardId) {\n            console.error(\n                \"Api.changeLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n\n        const url = `${this._baseUrl}/cards/likes/${cardId}`;\n        const opts = {\n            method: like ? \"PUT\" : \"DELETE\",\n            headers: this._headers,\n        };\n\n        return fetch(url, opts).then(this._checkResponse);\n    }\n\n    /**\n     * Метод обновления аватара\n     */\n    renewAvatar(avatarLink) {\n        if (!avatarLink) {\n            console.error(\n                \"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\"\n            );\n            return;\n        }\n\n        const url = `${this._baseUrl}/users/me/avatar`;\n        const hdr = this._headers;\n        hdr[\"Content-Type\"] = \"application/json\";\n        const opts = {\n            method: \"PATCH\",\n            headers: hdr,\n            body: JSON.stringify({\n                avatar: avatarLink,\n            }),\n        };\n\n        return fetch(url, opts).then(this._checkResponse);\n    }\n}\n\nconst api = new Api({\n    baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n    headers: {\n        authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}